-- 2024 DRAFT REPORT

-- Creating a TABLE filering all records for the 2023
CREATE TABLE defense_report AS
SELECT *
FROM defense
WHERE
	season = 2023;

-- double checking all weekly fpts values by cross referencing pts from my Yahoo league	
-- using the query below to filter through each team_code to check each team
-- also looking out for missing or duplicate values and errors that may have been overlooked
SELECT week, fpts
FROM defense_report
WHERE team_code = 'SF'
ORDER BY week;

-- CREATING KPIs queries for 2024 DRAFT REPORT

-- 	Creating a ranking system based on percentile rank
--  Finding the highest score, players scoring in top 5%, 10%, 25%, and above avg each week

WITH ranked_teams AS (
    SELECT
        week,
        team_code,
        fpts,
        RANK() OVER (PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank,
-- finding the average fpts for each week to find players with fpts above average
        AVG(fpts) OVER (PARTITION BY week) AS avg_weekly_fpts
    FROM
        defense_report
    GROUP BY
        week,
        team_code,
	    fpts
	)
SELECT
    week,
    team_code,
    fpts,
    team_rank,
    CASE
        WHEN fpts = MAX(fpts) OVER (PARTITION BY week) THEN 'Highest'
		WHEN team_rank <= 0.05 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 5%'
        WHEN team_rank <= 0.10 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 10%'
        WHEN team_rank <= 0.25 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 25%'
        WHEN fpts > avg_weekly_fpts THEN 'Above Average'
        ELSE ''
	END AS percentile_rank
FROM
    ranked_teams;
-- The results match the results from Excel analyis that uses conditional formatting to achieve this 



-- Assigning the results to the defense_report table adding team_rank column
ALTER TABLE defense_report
ADD COLUMN team_rank INTEGER,
ADD COLUMN percentile_rank VARCHAR(20);

-- Inserting the team_rank values into defense_report
-- Using the results from the CTE allows for only 1 calculation of team_rank
-- This saves 251 msec of run time
WITH ranked_teams AS (
    SELECT
        week,
        team_code,
        RANK() OVER (PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank
    FROM
        defense_report
    GROUP BY
        week,
        team_code
)
UPDATE defense_report AS dr
SET team_rank = rt.team_rank
FROM ranked_teams AS rt
WHERE dr.week = rt.week AND dr.team_code = rt.team_code;
-- Using the Where clause to match team_rank with the unique combination of team_code and week
WHERE dr.week = rt.week AND dr.team_code = rt.team_code;


-- inserting values for percentile_rank into defense_report
WITH ranked_teams AS (
    SELECT
        week,
        team_code,
        fpts,
        RANK() OVER (PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank,
        MAX(fpts) OVER (PARTITION BY week) AS max_fpts,
        COUNT(*) OVER (PARTITION BY week) AS total_teams,
        AVG(fpts) OVER (PARTITION BY week) AS avg_weekly_fpts
    FROM
        defense_report
    GROUP BY
        week,
        team_code,
        fpts
)
UPDATE defense_report AS dr
SET percentile_rank = CASE
        WHEN rt.fpts = rt.max_fpts THEN 'Highest'
        WHEN rt.team_rank <= 0.05 * rt.total_teams THEN 'Top 5%'
        WHEN rt.team_rank <= 0.10 * rt.total_teams THEN 'Top 10%'
        WHEN rt.team_rank <= 0.25 * rt.total_teams THEN 'Top 25%'
        WHEN rt.fpts > rt.avg_weekly_fpts THEN 'Above Average'
        ELSE ''
    END
FROM ranked_teams AS rt
WHERE dr.week = rt.week AND dr.team_code = rt.team_code;
