-- 2024 DRAFT REPORT

-- Creating a TABLE filering all records for the 2023
CREATE TABLE defense_report AS
SELECT *
FROM defense
WHERE
	season = 2023;

-- double checking all weekly fpts values by cross referencing pts from my Yahoo league	
-- using the query below to filter through each team_code to check each team
-- also looking out for missing or duplicate values and errors that may have been overlooked
SELECT
	week, 
	fpts
FROM 
	defense_report
WHERE 
	team_code = 'SF'
ORDER BY 
	week;

-- CREATING KPIs queries for 2024 DRAFT REPORT

-- 	Creating a ranking system based on percentile ranK
--  Finding the highest score, players scoring in top 5%, 10%, 25%, and above avg each week

ALTER TABLE defense
ADD COLUMN percentile_rank text; 

-- Inserting values for percentile_rank into defense_report
WITH ranked_teams AS (
    SELECT
        week,
        team_code,
        fpts,
		season,
        RANK() OVER (PARTITION BY season, week ORDER BY AVG(fpts) DESC) AS team_rank,
        MAX(fpts) OVER (PARTITION BY season, week) AS max_fpts,
        COUNT(*) OVER (PARTITION BY season, week) AS total_teams,
        AVG(fpts) OVER (PARTITION BY season, week) AS avg_weekly_fpts
    FROM
        defense
    GROUP BY
        week,
        team_code,
        fpts,
		season
)
UPDATE defense AS d
SET percentile_rank = CASE
        WHEN rt.fpts = rt.max_fpts THEN 'Highest'
        WHEN rt.team_rank <= 0.05 * rt.total_teams THEN 'Top 5%'
        WHEN rt.team_rank <= 0.10 * rt.total_teams THEN 'Top 10%'
        WHEN rt.team_rank <= 0.25 * rt.total_teams THEN 'Top 25%'
        WHEN rt.fpts > rt.avg_weekly_fpts THEN 'Above Average'
        ELSE 'Below Average'
    END
FROM ranked_teams AS rt
WHERE d.week = rt.week AND d.team_code = rt.team_code AND d.season = rt.season;
SELECT * from defense order by season desc, week, fpts desc
-- The results match the results from Excel analyis that uses conditional formatting to achieve this 


SELECT
	player,
	COUNT(week) FILTER(WHERE percentile_rank = 'Highest') AS "Highest",
	COUNT(week) FILTER(WHERE percentile_rank = 'Top 5%') AS "Top 5%",
	COUNT(week) FILTER(WHERE percentile_rank = 'Top 10%') AS "Top 10%",
	COUNT(week) FILTER(WHERE percentile_rank = 'Top 25%') AS "Top 25%",
	COUNT(week) FILTER(WHERE percentile_rank = 'Above Average') AS "Above Average",
	COUNT(week) FILTER(WHERE percentile_rank IN ('Highest', 'Top 5%', 'Top 10%', 'Top 25%', 'Above Average')) As "Total"
FROM
	defense_report
GROUP BY
	player;

-- Quantifying the total 
-- Finding the percentage of weeks where the player performed abve average or better
SELECT 
    player,
    ROUND(CAST(COUNT(week) FILTER(WHERE percentile_rank IN ('Highest', 'Top 5%', 'Top 10%', 'Top 25%', 'Above Average')) AS numeric) / 17, 2) AS percentile_percent
FROM	
    defense_report
WHERE team_code = 'BAL'
GROUP BY 
    player
ORDER BY 
    percentile_percent DESC
;
	
-- Adding percentile_percent to defense_report
ALTER TABLE defense_report
ADD COLUMN percentile_percent numeric;
-- inerting values into percentile report using a CTE for faster processing
WITH PercentilePercent AS (
    SELECT 
        player,
        ROUND(CAST(COUNT(week) FILTER(WHERE percentile_rank IN ('Highest', 'Top 5%', 'Top 10%', 'Top 25%', 'Above Average')) AS numeric) / 17, 2) AS percentile_percent
    FROM    
        defense_report
    GROUP BY 
        player
)
UPDATE defense_report AS dr
SET percentile_percent = pp.percentile_percent
FROM PercentilePercent AS pp
WHERE dr.player = pp.player;


-- Creating avg_fpts KPI
ALTER TABLE defense_report
ADD COLUMN avg_fpts numeric;

WITH SeasonAvg AS (
	SELECT
		player,
		ROUND(SUM(fpts) / SUM(games),2) AS avg_fpts
	FROM
		defense_report
	GROUP BY
		player
	)
UPDATE defense_report AS dr
SET avg_fpts = sa.avg_fpts
FROM SeasonAvg AS sa
WHERE dr.player = sa.player;

select  team_code, fpts, percentile_percent, avg_fpts from defense_report ORDER BY avg_fpts DESC

-- Creating total fpts KPI
ALTER TABLE defense_report
ADD COLUMN total_fpts numeric;

WITH TotalPoints AS (
	SELECT
		player,
		SUM(fpts) AS total_fpts
	FROM
		defense_report
	WHERE
		season = 2023
	GROUP BY
		player
	)
UPDATE defense_report AS dr
SET total_fpts = tp.total_fpts
FROM TotalPoints AS tp
WHERE dr.player = tp.player;

SELECT  
	player,
	avg_fpts,
 	percentile_percent
FROM 
	defense_report

ORDER BY
	avg_fpts DESC
-- created view called d with top 10 defenses
-- used this query to provide percentile_rank
WITH ranked_teams AS (
    SELECT
        player,
        avg_fpts,
        DENSE_RANK() OVER (ORDER BY avg_fpts DESC) AS rank
    FROM
        d
)
SELECT
    player,
    avg_fpts,
    CASE
        WHEN rank = 1.0 THEN 'Highest'
        WHEN rank <= 0.05 THEN 'Top 5%'
        WHEN rank <= 0.10 THEN 'Top 10%'
        WHEN rank <= 0.25 THEN 'Top 25%'
        WHEN avg_fpts > (SELECT PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY avg_fpts) FROM d) THEN 'Above Average'
        ELSE ''
    END AS percentile_rank
FROM
    ranked_teams;
