-- 2024 Draft Report
-- CREATE TABLE to get Kicker KPI's
CREATE TABLE k_report AS
SELECT 
	week,
	player,
	team_code,
	position,
	fg,
	fg_att,
	longest_fg,
	under_forty,
	forty_yd_range,
	over_50_yds,
	xpt,
	xpa,
	games,
	fpts
FROM 
	kicker
WHERE 
	season = 2023
GROUP BY
	week,
	player,
	team_code,
	position,
	fg,
	fg_att,
	longest_fg,
	under_forty,
	forty_yd_range,
	over_50_yds,
	xpt,
	xpa,
	games,fpts	
HAVING
	SUM(fg_att) > 0
	OR SUM(xpa) > 0
	
-- Adding new columns for total 2023 stats	
ALTER TABLE k_report
Add Column	tot_fg integer,
Add Column	tot_fg_att integer,
Add Column	tot_under_forty integer,
Add Column	tot_forty_yd_range integer,
Add Column	tot_over_50_yds integer,
Add Column	tot_xpt integer,
Add Column	tot_xpa integer,
Add Column	tot_games integer,
Add Column  tot_fpts numeric,	
Add Column  avg_fpts numeric

UPDATE k_report
SET 
    tot_fg = k_totals.tot_fg,
    tot_fg_att = k_totals.tot_fg_att,
	tot_under_forty = k_totals.tot_under_forty,
    tot_forty_yd_range  = k_totals.tot_forty_yd_range ,
    tot_over_50_yds = k_totals.tot_over_50_yds,
    tot_xpt = k_totals.tot_xpt,
    tot_xpa = k_totals.tot_xpa,
	tot_games = k_totals.tot_games,
	tot_fpts = k_totals.tot_fpts,
    avg_fpts = k_totals.avg_fpts
FROM (
    SELECT 
        player,
        SUM(fg) AS tot_fg,
        SUM(fg_att) AS tot_fg_att,
        SUM(under_forty) AS tot_under_forty,
        SUM(forty_yd_range) AS tot_forty_yd_range,
        SUM(over_50_yds) AS tot_over_50_yds,
        SUM(xpt) AS tot_xpt,
        SUM(xpa) AS tot_xpa,
        SUM(games) AS tot_games,
        SUM(fpts) AS tot_fpts,
        ROUND(SUM(fpts) / SUM(games), 2) AS avg_fpts
    FROM kicker
    WHERE season = 2023
    GROUP BY player
) AS k_totals
WHERE k_report.player = k_totals.player;
	
-- 	Creating a ranking system based on percentile ranK
--  Finding the highest score, players scoring in top 5%, 10%, 25%, and above avg each week
WITH ranked_team AS (
	SELECT
		week,
		player,
		fpts,
		RANK() OVER(PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank,
		MAX(fpts) OVER(PARTITION BY week) AS max_weekly_pts,
		COUNT(*) OVER(PARTITION BY week) AS player_count,
		AVG(fpts) OVER(PARTITION BY week) AS avg_weekly_fpts
	FROM
		k_report
	GROUP BY
		week,
		player,
		fpts
	)
SELECT
    week,
    player,
    fpts,
    team_rank,	
    CASE
        WHEN fpts = max_weekly_pts THEN 'Highest'
        WHEN team_rank <= 0.05 * player_count THEN 'Top 5%'
        WHEN team_rank <= 0.10 * player_count THEN 'Top 10%'
        WHEN team_rank <= 0.25 * player_count THEN 'Top 25%'
        WHEN fpts > avg_weekly_fpts THEN 'Above Average'
        ELSE ''
    END AS percentile_rank
FROM
    ranked_team;
-- The results match the results from Excel analyis that uses conditional formatting to achieve this 

ALTER TABLE k_report
ADD COLUMN percentile_rank text;

UPDATE k_report AS k
SET percentile_rank = rt.percentile_rank
FROM (
    -- Your original query to generate percentile ranks
    WITH ranked_teams AS (
        SELECT
       		week,
            player,
            fpts,
            RANK() OVER (PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank,
            MAX(fpts) OVER (PARTITION BY week) AS max_weekly_fpts,
            COUNT(*) OVER (PARTITION BY week) AS player_count,
            AVG(fpts) OVER (PARTITION BY week) AS avg_weekly_fpts
        FROM
            k_report
		GROUP BY
		week,
        player,
        fpts
    )
    SELECT
		week,
		player,
         CASE
            WHEN fpts = max_weekly_fpts THEN 'Highest'
            WHEN team_rank <= 0.05 * player_count THEN 'Top 5%'
            WHEN team_rank <= 0.10 * player_count THEN 'Top 10%'
            WHEN team_rank <= 0.25 * player_count THEN 'Top 25%'
            WHEN fpts > avg_weekly_fpts THEN 'Above Average'
            ELSE ''
        END AS percentile_rank
    FROM
        ranked_teams
) AS rt
WHERE k.player = rt.player AND k.week = rt.week;


	
SELECT
	player,
	COUNT(*) FILTER(WHERE percentile_rank = 'Highest') AS "Highest",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 5%') AS "Top 5%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 10%') AS "Top 10%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 25%') AS "Top 25%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Above Average') AS "Above Average",
	COUNT(*) FILTER(WHERE percentile_rank IN ('Highest', 'Top 5%', 'Top 10%', 'Top 25%', 'Above Average')) As "Total"	
FROM
	k_report
GROUP BY
	player
ORDER BY 
"Total" DESC;


ALTER TABLE k_report 
ADD COLUMN percentile_percent numeric;
UPDATE k_report AS k
SET percentile_percent = pr.percentile_percent
FROM (
	SELECT
	player,
	ROUND(CAST(COUNT(*) FILTER(WHERE percentile_rank IN ('Highest', 'Top 5%', 'Top 10%', 'Top 25%', 'Above Average')) AS numeric) / 17, 2) AS percentile_percent
FROM
	k_report
GROUP BY
	player) AS pr
WHERE 
	k.player = pr.player;

SELECT
	DISTINCT player,
	team_code,
	position,
	tot_fg,
	tot_fg_att,
	tot_under_forty,
	tot_forty_yd_range,
	tot_over_50_yds,
	tot_xpt,
	tot_xpa,
	tot_games,
	tot_fpts,
	avg_fpts,
	percentile_percent
FROM
	k_report
ORDER BY
	avg_fpts DESC
 
