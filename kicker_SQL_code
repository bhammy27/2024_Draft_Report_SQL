-- 2024 DRAFT REPORT
DROP VIEW defense_report
-- Creating a VIEW filering all records for the 2023
CREATE TABLE defense_report AS
SELECT *
FROM defense
WHERE
	season = 2023;
	
-- double checking all weekly fpts values by cross referencing pts from my Yahoo league	
-- using the query below to filter through each team_code to check each team
-- also looking out for missing or duplicate values and errors that may have been overlooked
SELECT week, fpts
FROM defense_report
WHERE team_code = 'SF'
ORDER BY week;

-- CREATING KPIs queries for 2024 DRAFT REPORT

-- total fpts in 2023
-- cross referencing values with total_fpts values in my Excel Analysis
SELECT 
	player,
	SUM(fpts) AS total_fpts
FROM
	defense_report
GROUP BY 
	player
ORDER BY
	total_fpts DESC;
	
-- total fpts in 2023
-- cross referencing values with total_fpts values in my Excel Analysis
SELECT 
	player,
	ROUND(SUM(fpts) / SUM(games),2) AS avg_fpts
FROM
	defense_report
GROUP BY 
	player
ORDER BY
	avg_fpts DESC;
-- Because each team has a BYE week with fpts value of 0, could not use AVG function
-- Using AVG function reduced the output by factoring in an extra week with a value of 0 fpts

-- CREATING TOTAL DEFENSIVE POINTS AND AVG DEFENSIVE FPTS FOR 2023
-- will use this to calculate player percentile rankings
SELECT
	SUM(fpts) AS total_D_fpts
FROM
	defense_report;

SELECT 
	ROUND(SUM(fpts) / SUM(games),2) AS avg__d_fpts
FROM
	defense_report;
	
-- 	Creating a ranking system based on percentile rank
--  Finding the highest score, players scoring in top 5%, 10%, 25%, and above avg each week
	
WITH ranked_teams AS (
    SELECT
        week,
        team_code,
        fpts,
        RANK() OVER (PARTITION BY week ORDER BY AVG(fpts) DESC) AS team_rank
    FROM
        defense_report
    GROUP BY
        week,
        team_code,
	fpts
	)
SELECT
    week,
    team_code,
    fpts,
    team_rank,
    CASE
        WHEN fpts = MAX(fpts) OVER (PARTITION BY week) THEN 'Highest'
		WHEN team_rank <= 0.05 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 5%'
        WHEN team_rank <= 0.10 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 10%'
        WHEN team_rank <= 0.25 * COUNT(*) OVER (PARTITION BY week) THEN 'Top 25%'
        ELSE 'Below Average'
    END AS percentile_rank
FROM
    ranked_teams;
	
Alter_table defense_report

-- The results match the results from Excel analyis that uses conditional formatting to achieve this 

--  Creating Percentile_Index
--  using a pivot table to count the weekly percentile rank categories for the season to get a numerical value
SELECT
	player,
	COUNT(*) FILTER(WHERE percentile_rank = 'Highest') AS "Highest",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 5%') AS "Top 5%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 10%') AS "Top 10%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Top 25%') AS "Top 25%",
	COUNT(*) FILTER(WHERE percentile_rank = 'Below Average') AS "Below Average"
FROM
	defense_report
GROUP BY
	player;
